<section class="new">
  <% provide(:title, 'Sign up') %>
  <div class="inner">
    <!--  ヘッダー、メイン、フッターの３分割で構成した入力フォーム -->
    <%= form_with(model: @user) do |f| %>
      <div class="form_wrapper">
        <!-- フォームの上部の部分 -->
        <div class="form_top">
          <h2 class="section_title">新規登録</h2>
          <h3 class="sub-title">1分で登録完了!<br>Memopyをさっそく始めてみよう！</h3>
        </div>
        <!-- フォームのメイン部分 -->
        <div class="input_items">
          <!-- 名前の入力アイテム -->
          <div class="input_item">
            <%= f.label :"お名前", {class: 'label_cus'} %>

<div class="field">
<div class="fake">（例）田中  太郎</div>
            <%= f.text_field :name, {class: 'input_cus'} %>
</div>
          </div>
          <!-- メールアドレスの入力アイテム -->
          <div class="input_item">
            <%= f.label :"メールアドレス", {class: 'label_cus'} %>
            <%= f.email_field :email, {class: 'input_cus'} %>
          </div>
          <!-- パスワードの入力アイテム -->
          <div class="input_item">
            <%= f.label :"パスワード", {class: 'label_cus'} %>
            <%= f.password_field :password, {class: 'input_cus'} %>
          </div>
          <!-- パスワード（確認）の入力アイテム -->
          <div class="input_item">
            <%= f.label :password_confirmation, "パスワード（確認）", {class: 'label_cus'} %>
            <%= f.password_field :password_confirmation, {class: 'input_cus'} %>
          </div>
        </div>
        <!-- フォームのボトム部分 -->
        <div class="form_bottom">
          <%= f.submit "登録する", class: "btn btn_cus" %>
        </div>
      </div>
    <% end %>
  </div>
</section>
<script>
//変数の宣言
//querySelectorAll() メソッドは、与えられた CSS セレクターに一致する文書中の要素のリストを示す静的な (生きていない) NodeList を返します。
      var inputs = document.querySelectorAll('.field .input_cus')
      for (var i = 0, len = inputs.length; i < len; i++) {
        var input = inputs.item(i)
//addEventListener() メソッドは、特定のイベントが対象に配信されるたびに呼び出される関数を設定
        .input_cus.addEventListener('click', (e)=>{
          var target = e.target
//Element.previousElementSiblingは、前の要素を取得する
// 変数「fake」を定義する
//*フォームオブジェクトのtargetプロパティは、フォーム送信先のターゲットを設定・参照します。
          var fake = target.previousElementSibling
          target.classList.add('focus')
//fakeクラスの要素に、moveとfocusのクラスを付与する
          .fake.classList.add('move', 'focus')
        })

        .input_cus.addEventListener('blur', (e)=>{
//event.target プロパティは、イベントデリゲーションを実装するために使用できます。
//＊イベントデリゲーションとはliからulへのように、イベントが伝播していく。
//*イベントデリゲートを利用した場合、しない場合と比べて要素に指定するイベントの数が少なくなります。その為、ブラウザメモリなどを節約し処理を早くさせることができます。
//変数「e.target」を宣言
          var target = e.target
//Element.previousElementSiblingは、前の要素を取得する
// 変数「fake」を定義する
          var fake = target.previousElementSibling
//lengthプロパティは配列の要素数を取得するのに使用します。
//「もし、ターゲット、value(オブジェクトの値)、配列の要素数が0だった場合」のif文
          if (target.value.length === 0) {
//「クラスfake（偽プレースホルダー） からクラスmoveを外す（フォームの中に戻る）」
            .fake.classList.remove('move')
          }
//*フォームオブジェクトのtargetプロパティは、フォーム送信先のターゲットを設定・参照します。
          target.classList.remove('focus')
//偽プレースホルダーからfocusクラスが外れる（color:青;解除）
          fake.classList.remove('focus')
        })
      }
</script>